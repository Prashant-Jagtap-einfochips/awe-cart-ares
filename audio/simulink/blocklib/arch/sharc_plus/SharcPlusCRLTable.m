function hLib = SharcPlusCRLTable
%   Copyright 2019 Bose Corporation

thisFile = mfilename('fullpath');
[thisPath, ~] = fileparts(thisFile);

hLib = RTW.TflTable;
%---------- entry: pooliir ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pooliir( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4[1 1; 128 128], single u5[1 1; 8192 8192], single u6[1 1; 2048 2048] )', ...
    'void unused = pooliirSplitProcess( single* y1, single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirSplit.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pooliir ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pooliir( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4, single u5[1 1; 8192 8192], single u6[1 1; 2048 2048] )', ...
    'void unused = pooliirSplitProcess( single* y1, single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirSplit.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pooliirCreateAssemblyLib ----------- 
% NOTE: This is used soley for building the CRL assembly library
% (TALARIA-181), which needs to copy over the source file unlike the others
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pooliirCreateAssemblyLib( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4[1 1; 128 128], single u5[1 1; 8192 8192], single u6[1 1; 2048 2048] )', ...
    'void unused = pooliirSplitProcess( single* y1, single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirSplit.h', ...
          'ImplementationSourceFile', 'pooliirSharcPlus.asm', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pooliirCore (multiple channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pooliirCore( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4[1 1; 128 128], single u5[1 1; 8192 8192], single u6[1 1; 2048 2048] )', ...
    'void unused = pooliirSplitProcess( single* y1, single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirSplit.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);

      
hLib.addEntry( hEnt ); 

%---------- entry: pooliirCore (single channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pooliirCore( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4, single u5[1 1; 8192 8192], single u6[1 1; 2048 2048] )', ...
    'void unused = pooliirSplitProcess( single* y1, single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirSplit.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);

      
hLib.addEntry( hEnt ); 

%---------- entry: pooliirAccel ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = iir_accelerator_process( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768] )', ...
    'void unused = iir_accelerator_process( single* y1, const single* u1, single* u2 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirAccelerator.h', ...
          'ImplementationSourceFile', 'pooliirAccelerator.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 
 
%---------- entry: pooliirAccelInit (multiple channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pooliirAccelInit( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4[1 1; 128 128], single u5[1 1; 8192 8192], single u6[1 1; 32768 32768], uint32 u7 )', ...
'void unused = iir_accelerator_init( single* y1, const single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6, uint32 u7 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirAccelerator.h', ...
          'ImplementationSourceFile', 'pooliirAccelerator.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pooliirAccelInit (single channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pooliirAccelInit( single u1[1 1; 1024 1024], uint32 u2, uint32 u3, uint32 u4, single u5[1 1; 8192 8192], single u6[1 1; 32768 32768], uint32 u7 )', ...
'void unused = iir_accelerator_init( single* y1, const single* u1, uint32 u2, uint32 u3, const uint32* u4, const single* u5, single* u6, uint32 u7 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirAccelerator.h', ...
          'ImplementationSourceFile', 'pooliirAccelerator.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pooliirAccelCancel ----------- 
hEnt = createCRLEntry(hLib, ...
'uint32 y1 = pooliirAccelCancel( single u1[1 1; 32768 32768] )', ...
'uint32 y1 = iir_accelerator_cancel( single* u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'pooliirAccelerator.h', ...
          'ImplementationSourceFile', 'pooliirAccelerator.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_core_process (multiple channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pool_delay_core_process( single u1[1 1; 1024 1024], uint32 u2[1 1; 1024 1024], uint32 u3[1 1; 32768 32768] )', ...
    'void unused = pool_delay_core_process( single* y1, const single* u1, const uint32* u2, uint32* u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );

%---------- entry: pool_delay_core_process (single channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pool_delay_core_process( single u1[1 1; 1024 1024], uint32 u2, uint32 u3[1 1; 32768 32768] )', ...
    'void unused = pool_delay_core_process( single* y1, const single* u1, const uint32* u2, uint32* u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );           

%---------- entry: pool_delay_core_init (multiple channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pool_delay_core_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], uint32 u3, uint32 u4[1 1; 1024 1024], uint32 u5, uint32 u6, uint32 u7[1 1; 32768 32768], const uint32 u8 )', ...
'void unused = pool_delay_core_init( single* y1, const single* u1, single* u2, const uint32 u3, const uint32* u4, const uint32 u5, const uint32 u6, uint32* u7, const uint32 u8 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_core_init (single channel u4) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pool_delay_core_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], uint32 u3, uint32 u4, uint32 u5, uint32 u6, uint32 u7[1 1; 32768 32768], const uint32 u8 )', ...
'void unused = pool_delay_core_init( single* y1, const single* u1, single* u2, const uint32 u3, const uint32* u4, const uint32 u5, const uint32 u6, uint32* u7, const uint32 u8 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );          

%---------- entry: pool_delay_mdma_process (multiple channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pool_delay_mdma_process( single u1[1 1; 1024 1024], uint32 u2[1 1; 1024 1024], uint32 u3[1 1; 32768 32768] )', ...
    'void unused = pool_delay_mdma_process( single* y1, const single* u1, const uint32* u2, uint32* u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_mdma_process (single channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = pool_delay_mdma_process( single u1[1 1; 1024 1024], uint32 u2, uint32 u3[1 1; 32768 32768] )', ...
    'void unused = pool_delay_mdma_process( single* y1, const single* u1, const uint32* u2, uint32* u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_mdma_init (multiple channel u6) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pool_delay_mdma_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], uint32 u3, single u4[1 1; 32768 32768], uint32 u5, uint32 u6[1 1; 1024 1024], uint32 u7, uint32 u8, uint32 u9[1 1; 32768 32768], const uint32 u10 )', ...
'void unused = pool_delay_mdma_init( single* y1, const single* u1, single* u2, const uint32 u3, single* u4, const uint32 u5, const uint32* u6, const uint32 u7, const uint32 u8, uint32* u9, const uint32 u10 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_mdma_init (single channel u6) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = pool_delay_mdma_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], uint32 u3, single u4[1 1; 32768 32768], uint32 u5, uint32 u6, uint32 u7, uint32 u8, uint32 u9[1 1; 32768 32768], const uint32 u10 )', ...
'void unused = pool_delay_mdma_init( single* y1, const single* u1, single* u2, const uint32 u3, single* u4, const uint32 u5, const uint32* u6, const uint32 u7, const uint32 u8, uint32* u9, const uint32 u10 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: pool_delay_mdma_cancel ----------- 
hEnt = createCRLEntry(hLib, ...
'uint32 y1 = pool_delay_mdma_cancel( uint32 u1[1 1; 32768 32768] )', ...
'uint32 y1 = pool_delay_mdma_cancel( uint32* u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'poolDelay.h', ...
          'ImplementationSourceFile', 'poolDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );          

%---------- entry: shared_delay_mdma_process (multiple channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = shared_delay_mdma_process( single u1[1 1; 1024 1024], int32 u2[1 1; 1024 1024], uint32 u3[1 1; 32768 32768] )', ...
    'void unused = shared_delay_mdma_process( single* y1, const single* u1, const int32* u2, uint32* u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'sharedDelay.h', ...
          'ImplementationSourceFile', 'sharedDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: shared_delay_mdma_process (single channel u2) ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = shared_delay_mdma_process( single u1[1 1; 1024 1024], int32 u2, uint32 u3[1 1; 32768 32768] )', ...
    'void unused = shared_delay_mdma_process( single* y1, const single* u1, const int32* u2, uint32* u3 )');    
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'sharedDelay.h', ...
          'ImplementationSourceFile', 'sharedDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: shared_delay_mdma_init (multiple delay u6 and mapping u7) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = shared_delay_mdma_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], int32 u3, single u4[1 1; 32768 32768], int32 u5, int32 u6[1 1; 1024 1024], int32 u7[1 1; 1024 1024], int32 u8, int32 u9, int32 u10, uint32 u11[1 1; 32768 32768], int32 u12 )', ...
'void unused = shared_delay_mdma_init( single* y1, const single* u1, single* u2, const int32 u3, single* u4, const int32 u5, const int32* u6, const int32* u7, const int32 u8, const int32 u9, const int32 u10, uint32* u11, const int32 u12 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'sharedDelay.h', ...
          'ImplementationSourceFile', 'sharedDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );  

%---------- entry: shared_delay_mdma_init (single delay u6 and mapping u7) ----------- 
hEnt = createCRLEntry(hLib, ...
'single y1 = shared_delay_mdma_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], int32 u3, single u4[1 1; 32768 32768], int32 u5, int32 u6, int32 u7, int32 u8, int32 u9, int32 u10, uint32 u11[1 1; 32768 32768], int32 u12 )', ...
'void unused = shared_delay_mdma_init( single* y1, const single* u1, single* u2, const int32 u3, single* u4, const int32 u5, const int32* u6, const int32* u7, const int32 u8, const int32 u9, const int32 u10, uint32* u11, const int32 u12 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'sharedDelay.h', ...
          'ImplementationSourceFile', 'sharedDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );

%---------- entry: shared_delay_mdma_cancel ----------- 
hEnt = createCRLEntry(hLib, ...
'uint32 y1 = shared_delay_mdma_cancel( uint32 u1[1 1; 32768 32768] )', ...
'uint32 y1 = shared_delay_mdma_cancel( uint32* u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'sharedDelay.h', ...
          'ImplementationSourceFile', 'sharedDelay.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );

%---------- entry: copysignf ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1 = copysignf( single u1, single u2 )', ...
    'single y1 = copysignf( single u1, single u2 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'math.h');



hLib.addEntry( hEnt ); 

%---------- entry: IFIR ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = IFIR( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 1024 1024], int32 u5, int32 u6, single u7[1 1; 1024 1024], uint32 u8[1 1; 64 64], int32 u9 )', ...
    'void unused = IFirProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, int32 u5, int32* u6, const single* u7, uint32* u8, int32 u9 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'IFir.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);



hLib.addEntry( hEnt ); 

%---------- entry: IFIR ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = IFIR( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 1024 1024], int32 u5, int32 u6, single u7[1 1; 1024 1024], uint32 u8, int32 u9 )', ...
    'void unused = IFirProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, int32 u5, int32* u6, const single* u7, uint32* u8, int32 u9 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'IFir.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);



hLib.addEntry( hEnt ); 

%---------- entry: IFIRCreateAssemblyLib ----------- 
% NOTE: This is used soley for building the CRL assembly library
% (TALARIA-181), which needs to copy over the source file unlike the others
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = IFIRCreateAssemblyLib( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 1024 1024], int32 u5, int32 u6, single u7[1 1; 1024 1024], uint32 u8[1 1; 64 64], int32 u9 )', ...
    'void unused = IFirProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, int32 u5, int32* u6, const single* u7, uint32* u8, int32 u9 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'IFir.h', ...
          'ImplementationSourceFile', 'IFirProcessSharc_plus.asm', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);



hLib.addEntry( hEnt ); 

%---------- entry: fir_even ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = fir_even( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 4096 4096], uint32 u5, uint32 u6, uint32 u7[1 1; 64 64], single u8[1 1; 4096 4096] )', ...
    'void unused = FirEvenProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, uint32 u5, uint32* u6, uint32* u7, single* u8 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'FirEven.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_even ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = fir_even( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 4096 4096], uint32 u5, uint32 u6, uint32 u7, single u8[1 1; 4096 4096] )', ...
    'void unused = FirEvenProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, uint32 u5, uint32* u6, uint32* u7, single* u8 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'FirEven.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);
      
hLib.addEntry( hEnt ); 

%---------- entry: fir_even ----------- 
% NOTE: This is used soley for building the CRL assembly library
% (TALARIA-181), which needs to copy over the source file unlike the others
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = firEvenCreateAssemblyLib( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 4096 4096], uint32 u5, uint32 u6, uint32 u7[1 1; 64 64], single u8[1 1; 4096 4096] )', ...
    'void unused = FirEvenProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, uint32 u5, uint32* u6, uint32* u7, single* u8 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'FirEven.h', ...
          'ImplementationSourceFile', 'FirEvenProcessSharc_Plus.asm', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_core_process ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = fir_core_process( single u1[1 1; 1024 1024], uint32 u2[1 1; 65536 65536], uint32 u3 )', ...
    'void unused = fir_core_process( single* y1, const single* u1, uint32* u2, uint32 u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_core.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);

hLib.addEntry( hEnt ); 

%---------- entry: firGenericCreateAssemblyLib ----------- 
% NOTE: This is used soley for building the CRL assembly library
% (TALARIA-181), which needs to copy over the source file unlike the others
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = firGenericCreateAssemblyLib( single u1[1 1; 1024 1024], uint32 u2[1 1; 65536 65536], uint32 u3 )', ...
    'void unused = fir_core_process( single* y1, const single* u1, uint32* u2, uint32 u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_core.h', ...
          'ImplementationSourceFile', 'fir_core.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalIncludePaths', {fullfile(thisPath, 'src')}, ...
          'AdditionalSourceFiles', { ...
                'fir_vec_mc_21XI.asm'}, ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_core_init ----------- 
% multiple output/coeff
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_core_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 524288 524288], uint32 u4[1 1; 1024 1024], uint32 u5[1 1; 1024 1024], uint32 u6[1 1; 1024 1024], uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11[1 1; 65536 65536] )', ...
    'void unused = fir_core_init( uint32* y1, const single* u1, const single* u2, single* u3, const uint32* u4, const uint32* u5, const uint32* u6, uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32* u11 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_core.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_core_init ----------- 
% multiple output, single coeff
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_core_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 32768 32768], uint32 u4, uint32 u5[1 1; 1024 1024], uint32 u6[1 1; 1024 1024], uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11[1 1; 65536 65536] )', ...
    'void unused = fir_core_init( uint32* y1, const single* u1, const single* u2, single* u3, const uint32* u4, const uint32* u5, const uint32* u6, uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32* u11 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_core.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_core_init ----------- 
% single output/coeff
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_core_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 32768 32768], uint32 u4, uint32 u5, uint32 u6, uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11[1 1; 65536 65536] )', ...
    'void unused = fir_core_init( uint32* y1, const single* u1, const single* u2, single* u3, const uint32* u4, const uint32* u5, const uint32* u6, uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32* u11 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_core.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_accelerator_process ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = fir_accelerator_process( single u1[1 1; 1024 1024], uint32 u2[1 1; 65536 65536], uint32 u3 )', ...
    'void unused = fir_accelerator_process( single* y1, const single* u1, uint32* u2, uint32 u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_accelerator.h', ...
          'ImplementationSourceFile', 'fir_accelerator.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalIncludePaths', {fullfile(thisPath, 'src')}, ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_accelerator_init (multiple outputs & coeff sets) ----------- 
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_accelerator_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 32768 32768], uint32 u4, uint32 u5[1 1; 1024 1024], uint32 u6[1 1; 1024 1024], uint32 u7[1 1; 1024 1024], uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32 u12[1 1; 65536 65536], uint32 u13 )', ...
    'void unused = fir_accelerator_init( uint32* y1, const single* u1, const single* u2, single* u3, uint32 u4, const uint32* u5, const uint32* u6, const uint32* u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32* u12, uint32 u13 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_accelerator.h', ...
          'ImplementationSourceFile', 'fir_accelerator.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalIncludePaths', {fullfile(thisPath, 'src')}, ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_accelerator_init (multiple outputs, single coeff set) ----------- 
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_accelerator_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 32768 32768], uint32 u4, uint32 u5, uint32 u6[1 1; 1024 1024], uint32 u7[1 1; 1024 1024], uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32 u12[1 1; 65536 65536], uint32 u13 )', ...
    'void unused = fir_accelerator_init( uint32* y1, const single* u1, const single* u2, single* u3, uint32 u4, const uint32* u5, const uint32* u6, const uint32* u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32* u12, uint32 u13 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_accelerator.h', ...
          'ImplementationSourceFile', 'fir_accelerator.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalIncludePaths', {fullfile(thisPath, 'src')}, ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fir_accelerator_init (single output & coeff set) ----------- 
hEnt = createCRLEntry(hLib, ...
    'uint32 y1 = fir_accelerator_init( single u1[1 1; 1024 1024], single u2[1 1; 32768 32768], single u3[1 1; 32768 32768], uint32 u4, uint32 u5, uint32 u6, uint32 u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32 u12[1 1; 65536 65536], uint32 u13 )', ...
    'void unused = fir_accelerator_init( uint32* y1, const single* u1, const single* u2, single* u3, uint32 u4, const uint32* u5, const uint32* u6, const uint32* u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32* u12, uint32 u13 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_accelerator.h', ...
          'ImplementationSourceFile', 'fir_accelerator.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalIncludePaths', {fullfile(thisPath, 'src')}, ...
          'SideEffects', true);


hLib.addEntry( hEnt );

%---------- entry: fir_accelerator_cancel ----------- 
hEnt = createCRLEntry(hLib, ...
'uint32 y1 = fir_accelerator_cancel( uint32 u1[1 1; 32768 32768] )', ...
'uint32 y1 = fir_accelerator_cancel( uint32* u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'fir_accelerator.h', ...
          'ImplementationSourceFile', 'fir_accelerator.c', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath', fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);


hLib.addEntry( hEnt );    

%---------- entry: cfft_f ----------- 
hEnt = createCRLEntry(hLib, ...
    'csingle y1[1 1; 1024 1024] = cfft_f( csingle u1[1 1; 1024 1024], csingle u2[1 1; 1024 1024], uint32 u3, uint32 u4, int32 u5 )', ...
    'void unused = cfft_process( csingle* y1, csingle* u1, csingle* u2, uint32 u3, uint32 u4, int32 u5  )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'cfft.h', ...
          'ImplementationSourceFile', 'cfftProcessSharc_plus.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalHeaderFiles', { ...
                'twiddle.h'}, ...
          'AdditionalIncludePaths', {fullfile(thisPath,'inc')}, ...
          'AdditionalSourceFiles', { ...
                'twiddle_256.c'}, ...
          'AdditionalSourcePaths', {fullfile(thisPath,'src')}, ...
          'SideEffects', true);



hLib.addEntry( hEnt ); 

%---------- entry: cifft_f ----------- 
hEnt = createCRLEntry(hLib, ...
    'csingle y1[1 1; 1024 1024] = cifft_f( csingle u1[1 1; 1024 1024], csingle u2[1 1; 1024 1024], uint32 u3, uint32 u4, int32 u5 )', ...
    'void unused = cifft_process( csingle* y1, csingle* u1, csingle* u2, uint32 u3, uint32 u4, int32 u5 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'cifft.h', ...
          'ImplementationSourceFile', 'cifftProcessSharc_plus.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalHeaderFiles', { ...
                'twiddle.h'}, ...
          'AdditionalIncludePaths', {fullfile(thisPath,'inc')}, ...
          'AdditionalSourceFiles', { ...
                'twiddle_256.c'}, ...
          'AdditionalSourcePaths', {fullfile(thisPath,'src')}, ...
          'SideEffects', true);


hLib.addEntry( hEnt ); 

%---------- entry: fix ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1 = fix( single u1 )', ...
    'single y1 = truncf( single u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'adi_missing_math_functions.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'GenCallback', 'RTW.copyFileToBuildDir');



hLib.addEntry( hEnt ); 

%---------- entry: round ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1 = round( single u1 )', ...
    'single y1 = roundf( single u1 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'adi_missing_math_functions.h', ...
          'ImplementationHeaderPath', fullfile(thisPath, 'inc'), ...
          'GenCallback', 'RTW.copyFileToBuildDir');



hLib.addEntry( hEnt ); 


%---------- entry: circindex ----------- 
hEnt = createCRLEntry(hLib, ...
    'int32 y1 = circindex( int32 u1, int32 u2, int32 u3 )', ...
    'int32 y1 = circindex( int32 u1, int32 u2, int32 u3 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'SideEffects', true, ...
          'ImplementationHeaderFile', 'builtins.h');

hLib.addEntry( hEnt ); 

%---------- entry: rfft ----------- 
hEnt = createCRLEntry(hLib, ...
    'csingle y1[1 1; 1024 1024] = rfft_process( single u1[1 1; 1024 1024], single u2[1 1; 512 512], single u3[1 1; 512 512], single u4[1 1; 512 512], single u5[1 1; 512 512], uint32 u6, uint32 u7, uint32 u8, uint32 u9 )', ...
    'void unused = rfft_process( csingle* y1, single* u1, single* u2, single* u3, single* u4, single* u5, uint32 u6, uint32 u7, uint32 u8, uint32 u9 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'rfft.h', ...
          'ImplementationSourceFile', 'rfftProcessSharc_plus.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalHeaderFiles', { ...
                'twiddle.h'}, ...
          'AdditionalIncludePaths', {fullfile(thisPath,'inc')}, ...
          'AdditionalSourceFiles', { ...
                'twiddle_arrays_256.c', 'twiddle_arrays_128.c'}, ...
          'AdditionalSourcePaths', {fullfile(thisPath,'src')}, ...
          'SideEffects', true);

hLib.addEntry( hEnt );

%---------- entry: rfft (in-place) ----------- 
hEnt = createCRLEntry(hLib, ...
    '[csingle y1[1 1; 1024 1024], csingle y2[1 1; 1024 1024]] = rfft_inplace_process( single u1[1 1; 1024 1024], single u2[1 1; 512 512], single u3[1 1; 512 512], single u4[1 1; 512 512], uint32 u5, uint32 u6, uint32 u7 )', ...
    'void unused = rfft_process_inplace( csingle* y1, csingle* y2, single* u1, single* u2, single* u3, single* u4, uint32 u5, uint32 u6, uint32 u7 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'rfft.h', ...
          'ImplementationSourceFile', 'rfftProcessSharc_plus.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalHeaderFiles', { ...
                'twiddle.h'}, ...
          'AdditionalIncludePaths', {fullfile(thisPath,'inc')}, ...
          'AdditionalSourceFiles', { ...
                'twiddle_arrays_256.c', 'twiddle_arrays_128.c'}, ...
          'AdditionalSourcePaths', {fullfile(thisPath,'src')}, ...
          'SideEffects', true);

hLib.addEntry( hEnt ); 

%---------- entry: rifft ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 1024 1024] = rifft_process( csingle u1[1 1; 1024 1024], single u2[1 1; 512 512], single u3[1 1; 512 512], single u4[1 1; 512 512], single u5[1 1; 512 512], const single* u6[1 1; 512 512], single* u7[1 1; 1024 1024], uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32 u12 )', ...
    'void unused = rifft_process( single* y1, csingle* u1, single* u2, single* u3, single* u4, single* u5, const single* u6, single* u7, uint32 u8, uint32 u9, uint32 u10, uint32 u11, uint32 u12 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'rifft.h', ...
          'ImplementationSourceFile', 'rifftProcessSharc_plus.c', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalHeaderFiles', { ...
                'blkutil.h', 'twiddle.h'}, ...
          'AdditionalIncludePaths', {fullfile(thisPath,'inc')}, ...
          'AdditionalSourceFiles', { ...
                'blkutil.c', 'twiddle_arrays_256.c', 'twiddle_arrays_128.c'}, ...
          'AdditionalSourcePaths', {fullfile(thisPath,'src')}, ...
          'SideEffects', true);

hLib.addEntry( hEnt ); 
%---------- entry: upfir ----------- 
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = upfir( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 1024 1024], int32 u5, int32 u6, single u7[1 1; 1024 1024], uint32 u8[1 1; 64 64], int32 u9, int32 u10 )', ...
    'void unused = upfirProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, int32 u5, int32* u6, const single* u7, uint32* u8, int32 u9, int32 u10 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'upfir.h', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'AdditionalLinkObjs', {'libcrlassembly.dlb'}, ...
          'AdditionalLinkObjsPaths', {fullfile(thisPath, 'lib')}, ...
          'SideEffects', true);
hLib.addEntry( hEnt );
%---------- entry: upfir ----------- 
% NOTE: This is used soley for building the CRL assembly library
% (TALARIA-181), which needs to copy over the source file unlike the others
hEnt = createCRLEntry(hLib, ...
    'single y1[1 1; 256 256] = upfirCreateAssemblyLib( single u1[1 1; 256 256], uint32 u2, uint32 u3, single u4[1 1; 1024 1024], int32 u5, int32 u6, single u7[1 1; 1024 1024], uint32 u8[1 1; 64 64], int32 u9, int32 u10 )', ...
    'void unused = upfirProcess( single* y1, single* u1, uint32 u2, uint32 u3, single* u4, int32 u5, int32* u6, const single* u7, uint32* u8, int32 u9, int32 u10 )');
hEnt.setTflCFunctionEntryParameters( ...
          'Priority', 100, ...
          'ImplementationHeaderFile', 'upfir.h', ...
          'ImplementationHeaderPath',  fullfile(thisPath, 'inc'), ...
          'ImplementationSourceFile', 'upfirProcessSharc_plus.asm', ...
          'ImplementationSourcePath',  fullfile(thisPath, 'src'), ...
          'GenCallback', 'RTW.copyFileToBuildDir', ...
          'SideEffects', true);
hLib.addEntry( hEnt ); 
