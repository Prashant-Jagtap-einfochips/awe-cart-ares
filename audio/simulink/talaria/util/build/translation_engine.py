#!/usr/bin/env python
###############################################################################
#
# BOSE CORPORATION
# COPYRIGHT (c) BOSE CORPORATION ALL RIGHTS RESERVED
# This program may not be reproduced, in whole or in part in any
# form or any means whatsoever without the written permission of:
# BOSE CORPORATION
# The Mountain
# Framingham, MA 01701-9168
#
# translation_engine Loads a translation engine into python.
#   Given the full path of the dll corresponding to the translation engine
#   this routine loads the dll. If successful, 
#   the resulting object can be used to access the translation engine.
# Note: The translation engine must be built with the same
# machine architecture as the python (i.e. 64 vs. 32 bit)
################################################################################
import sys
import warnings
import ctypes
from ctypes import *

def byte_to_str(bytesThing):
    return bytesThing.decode(encoding='UTF-8')

def str_to_byte(stringThing):
    if sys.version_info < (3, 0):
        return bytes(stringThing)
    else:
        return bytes(stringThing, 'utf8')

def int32_to_uint32(i):
    return ctypes.c_uint32(i).value

class translation_engine:
    '''
    Python class storing Translation Engine from a model
    '''
    def __init__(self, translation_engine_dll):
        ''' Initialize data
        '''
        self._filename = translation_engine_dll
        try:
            self._mydll = cdll.LoadLibrary(self._filename)
        except:
            raise Exception('Error: Unable to load dll ' + self._filename)
        self._mydll.InitializeTranslationEngine()
        
    def ListTuneVars(self):
        ''' ListTuneVars Returns a string array of recognized TuneVars
        '''
        tuneVars = []
        self._mydll.FirstTuneVar.restype = c_char_p
        aName = self._mydll.FirstTuneVar()
        if (aName != None):
            tuneVars.append(byte_to_str(aName))
        self._mydll.NextTuneVar.restype = c_char_p
        aName = self._mydll.NextTuneVar()
        while aName != None:
            tuneVars.append(byte_to_str(aName))
            self._mydll.NextTuneVar.restype = c_char_p
            aName = self._mydll.NextTuneVar()
        return tuneVars

    def GetTuneVarsForTop(self,topName):
        ''' ListTuneVars Returns a string array of recognized TuneVars
        '''
        self._mydll.GetTuneVarsForTop.restype = c_char_p
        return byte_to_str(self._mydll.GetTuneVarsForTop(str_to_byte(topName)))
    
    def SetTuneVar(self,tuneVarName,tuneVarValues):
        ''' SetTuneVar Sets a TuneVar with provided space-delimited values
            Returns 0 for OK, 1 for unrecognized TuneVar, 2 for too many elements
        '''
        retVal = self._mydll.SetTuneVar(str_to_byte(tuneVarName),str_to_byte(tuneVarValues))
        strings = self._mydll.GetTuneVarErrorStrings()
        if retVal == 1:
            raise Exception('TTE:SetTuneVar:error ' + byte_to_str(c_char_p(strings).value))
        if retVal == 2:
            warnings.warn('TTE:SetTuneVar:warning ' + byte_to_str(c_char_p(strings).value))
        return retVal

    def SetReturnBufferSize(self,numBytes):
        retVal = self._mydll.SetReturnBufferSize(numBytes)
        if (retVal):
            raise Exception('TTE:SetReturnBufferSize:error Unable to allocate %d bytes', numBytes)
    
    def GetTuneVar(self,tuneVarName):
        self._mydll.GetTuneVar.restype = c_char_p
        values = self._mydll.GetTuneVar(str_to_byte(tuneVarName))
        strings = self._mydll.GetTuneVarErrorStrings()
        if (c_char_p(strings).value):
            raise Exception('TTE:GetTuneVar:error ' + byte_to_str(c_char_p(strings).value))
        return byte_to_str(values)

    def RunTranslations(self):
        ''' RunTranslations Returns a string array of up-to-date TOPs
            generated by running any translation routines flagged as
            out-of-date (i.e. because one or more of their TuneVars have
            been set). Once translations are successful, they are no
            longer out-of-date and will not run again unless new TuneVar
            values are set (or there are errors)
        '''
        self.ClearTranslationErrorState()
        TOPs = []
        self._mydll.GetFirstTranslatedTOP.restype = c_char_p
        aTOP = self._mydll.GetFirstTranslatedTOP()
        if (aTOP != None):
            TOPs.append(byte_to_str(aTOP))
        self._mydll.GetNextTranslatedTOP.restype = c_char_p
        aTOP = self._mydll.GetNextTranslatedTOP()
        self.EmitErrors('RunTranslations')
        while (aTOP != None):
            TOPs.append(byte_to_str(aTOP))
            self._mydll.GetNextTranslatedTOP.restype = c_char_p
            aTOP = self._mydll.GetNextTranslatedTOP()
            self.EmitErrors('RunTranslations')
        return TOPs
            
    def GetFirstTranslatedTOP(self):
        ''' GetFirstTransledTOP Runs translations "on demand"
            individually to extract TOPs one at a time.
        '''
        self.ClearTranslationErrorState()
        self._mydll.GetFirstTranslatedTOP.restype = c_char_p
        aTOP = self._mydll.GetFirstTranslatedTOP()
        self.EmitErrors('GetFirstTranslatedTOP')
        return byte_to_str(aTOP)
        
    def GetNextTranslatedTOP(self):
        ''' GetNextTranslatedTOP Runs translations "on demand"
            individually to extract TOPs one at a time.
        '''
        self.ClearTranslationErrorState()
        self._mydll.GetNextTranslatedTOP.restype = c_char_p
        aTOP = self._mydll.GetNextTranslatedTOP()
        self.EmitErrors('GetNextTranslatedTOP')
        return byte_to_str(aTOP)
        
    def LoadAllTuneVarDefaults(self):
        self._mydll.LoadAllTuneVarDefaults()
        
    def ClearAllTuneSightings(self):
        self._mydll.ClearAllTuneSightings()
        
    def ClearAllTranslationRequiredFlags(self):
        self._mydll.ClearAllTranslationRequiredFlags()
        
    def GetTranslationErrorState(self):
        ''' GetTranslationErrorState Returns the current error state
            for the engine. A value of 0 implies no errors.
        '''
        errorState = self._mydll.GetTranslationErrorState()
        return errorState
        
    def GetErrorStrings(self):
        ''' GetErrorStrings Returns the current error strings
            for the engine.
        '''
        self._mydll.GetTranslationErrorStrings.restype = c_char_p
        errors = self._mydll.GetTranslationErrorStrings()
        return byte_to_str( errors )

    def ClearTranslationErrorState(self):
        ''' ClearTranslationErrorState Resets the engine's error state
            back to 0 (no errors).
        '''
        self._mydll.ClearTranslationErrorState()

    def GetTopCompat(self,overlayGroupNameHash):
        ''' GetTopCompatByIndex Returns the compatibility hash code for the TOPs
            represented within this translation engine. Provide
            a zero-based overlay group index number.
        '''
        compatibilityHash = self._mydll.GetTopCompat(overlayGroupNameHash)
        return '%8.8x' % int32_to_uint32(compatibilityHash)

    def GetTopCompatByName(self,overlayGroupName):
        ''' GetTopCompatByName Returns the compatibility hash code for the TOPs
            represented within this translation engine. Provide
            the exact name of the overlay group.
        '''
        compatibilityHash = self._mydll.GetTopCompatByName(str_to_byte(overlayGroupName))
        return '%8.8x' % int32_to_uint32(compatibilityHash)
        
    def Reset(self):
        ''' Reset Clears the engine's error state and all other states
            such as the tracking of which TuneVars have been seen, and
            the flags which indicate that a translation is out-of-date
            and needs to be run.
        '''
        self._mydll.LoadAllTuneVarDefaults()
        self._mydll.ClearAllTuneSightings()
        self._mydll.ClearAllTranslationRequiredFlags()
        self.ClearTranslationErrorState()
    
    def EmitErrors(self,functionName):
        msgStrings = self.GetErrorStrings();
        if (self.GetTranslationErrorState()):
            raise Exception('TTE:%s:error %s' % (functionName, msgStrings))
        elif (msgStrings):
            warnings.warn('TTE:%s:warning %s' % (functionName, msgStrings))
