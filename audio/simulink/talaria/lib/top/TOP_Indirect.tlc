%% INDIRECT ADDRESSING TOP code generation

%%   Copyright 2018 Bose Corporation


%% ------------------------------------------------------
%function TopSetupAllIndirect() void

    %% Check if the high level setup of TOP is already done
    %if EXISTS(::TOP_PARTITION_INDEX)
        %% Yep - already done. We can leave.
        %return
    %endif

    %% (ELSE)

    %createrecord ::TOP_PARTITION_INDEX{ Index 0 }
    %createrecord ::TOP_STRUCT_INFO{}
    %createrecord ::TOP_PATH_INDEX{}

    %% -----------------------------------------------------
    %% SOURCE FILES *.c TOP ACCESS
    %% topAccessFileName source
    %assign fileH = LibCreateSourceFile("Source","Custom",TopGetAccessFileName())
    %assign topHeaderName = ModelPrefix() + "TOP.h"

    %% Includes :
    %openfile buffer
        #include "rtwtypes.h"
        #include "%<FeaturePathGetAsdIdFileName()>.h" // for ASDID parsing macros
        #include "%<topHeaderName>"
        #include <string.h> // for memcpy
        %if TLC_FALSE == LibIsModelReferenceTarget()
            #include "%<TopGetAccessFileName()>.h"
        %endif
        #include "%<TopGetIdFileName()>.h" // for request structure
        #include "%<FeaturePathGetPartitionFilename()>.h" // for partition root

    %closefile buffer
    %<LibSetSourceFileSection(fileH,"Includes",buffer)>

    %%---------------------------------------------------------------------
    %% Setup a place to emit partition pointer arrays and size arrays
    %<LibAddSourceFileCustomSection(fileH, "Definitions", "PointerArrays")>

    %%---------------------------------------------------------------------
    %% Add framework entry point to use the request dispatch table
    %% ... but only for top-level model generation
    %if TLC_FALSE == LibIsModelReferenceTarget()
        %openfile buffer
            %% Pull in the hand-written function implementations
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %include "tlc_TOP_Indirect.c"
            %include "tlc_TOP_Access.c"
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %closefile buffer
        %<LibSetSourceFileSection(fileH,"Functions",buffer)>

        %%---------------------------------------------------------------------
        %% [SHARED_HANDLER] ASDID HANDLER FUNCTION INTEGRATION FOR TOP ACCESS
        %openfile includeBuffer
            #include "%<TopGetAccessFileName()>.h" // for TOP access request handler
        %closefile includeBuffer
        %openfile handlerBuffer
            if (ASDID_IS_TOP(asdId))
            {
              retVal = %<ModelPrefix()>HandleTopRequest(pReqBuf,reqBufSize,pRspBuf,rspBufSize);
            }
        %closefile handlerBuffer
        %<FeaturePathAddAsdIdHandler(includeBuffer,handlerBuffer)>
    %endif

    %%---------------------------------------------------------------------
    %% ------------------- ID header file (also used by Control processor)
    %assign fileH = LibCreateSourceFile("Header","Custom",TopGetIdFileName())
    %openfile buffer
    #include <stdint.h>
    #include "ASDID.h"

    // ------------------------------------------------------------
    // TOP ACCESS TOKENS
    // ------------------------------------------------------------
    %% The content here is filled in below by TopSetupPartitionIndirect
    %% since this model is using INDIRECT ADDRESSING. Note the Partition
    %% block is what drives this code generation (not a TOP block).
    %closefile buffer
    %<LibSetSourceFileSection(fileH,"Defines",buffer)>
    %openfile buffer
        // ------------------------------------------------------------
        // TOP ACCESS REQUEST PAYLOADS
        // ------------------------------------------------------------
        typedef struct
        {
            uint32_t topId;         // Any TOP_WRITE_ token
            uint32_t callerHandle;
            uint32_t offset;
            uint32_t byteCount;
            uint8_t data[];
        } TOP_WriteRequest_type;
        typedef TOP_WriteRequest_type TOP_Request_type; // backward compatibility

        typedef struct
        {
            uint32_t topId;         // Any TOP_READ_ token
            uint32_t callerHandle;
            uint32_t offset;
            uint32_t byteCount;
        } TOP_ReadRequest_type;

        // ------------------------------------------------------------
        // TOP ACCESS RESPONSE PAYLOADS
        // ------------------------------------------------------------
        // See also AsdIdStatus_type in %<FeaturePathGetAsdIdFileName()>.h
        typedef struct
        {
            uint32_t            topId;
            uint32_t            callerHandle;
            ASDSTATUS           statusCode;
        } TOP_WriteResponse_type;

        typedef struct
        {
            uint32_t            topId;
            uint32_t            callerHandle;
            ASDSTATUS           statusCode;
            uint32_t            byteCount;
            uint8_t             data[];
        } TOP_ReadResponse_type;
    %closefile buffer
    %<LibSetSourceFileSection(fileH,"Typedefs",buffer)>

    %% ... but only for top-level model generation
    %if TLC_FALSE == LibIsModelReferenceTarget()
        %% --------------------------------------------------------------------
        %% topAccessFileName header (TOP_Access)
        %assign fileH = LibCreateSourceFile("Header","Custom",TopGetAccessFileName())
        %% Add framework entry point to use the request dispatch table
        %openfile buffer
            // ------------------------------------------------------------
            // ACCESS ROUTINE TO GET AND SET TOP VALUES
            // ------------------------------------------------------------
            // See %<FeaturePathGetAsdIdFileName()>.h for returned ASDSTATUS codes.
            int %<ModelPrefix()>HandleTopRequest(void* pReqBuf, uint32_t reqBufSize,
                                 void* pRspBuf, uint32_t rspBufSize);

        %closefile buffer
        %<LibSetSourceFileSection(fileH,"Functions",buffer)>
    %endif
%endfunction


%% ------------------------------------------------------
%% The "block" passed in here is a Partition block (not a TOP)
%function TopSetupPartitionIndirect(block, system) void

    %assign PartitionNumber  = ParamSettings.PartitionNumber[0][0]
    %assign GroupNumber      = ParamSettings.GroupNumber[0][0]
    %assign GroupPath        = ParamSettings.GroupPath
    %assign TopBlock         = FEVAL("strsplit",ParamSettings.TopBlock,",")
    %assign TopPath          = FEVAL("strsplit",ParamSettings.TopPath,",")
    %assign TopStruct        = FEVAL("strsplit",ParamSettings.TopStruct,",")
    %assign TopSignal        = FEVAL("strsplit",ParamSettings.TopSignal,",")
    %assign TopCount         = SIZE(TopBlock)[1]

    %if TopCount == 0
        %% Bail out if there are no TOPs in this partition
        %return
    %endif

    %% OK - we've got TOPs: Ensure the shared high level setup is complete
    %<TopSetupAllIndirect()>

    %assign fileH = LibCreateSourceFile("Source","Custom",TopGetAccessFileName())
    %assign PointerArrayName = SPRINTF("TopGroup%dPartition%d",GroupNumber,PartitionNumber)

    %% Step 1/3: Hook up to partition root
    %assign partitionFileH = LibCreateSourceFile("Source","Custom",FeaturePathGetPartitionFilename())
    %openfile buffer
        extern void* %<PointerArrayName>[];
        extern uint32_t %<PointerArrayName>Size[];
        %assign TopRootName = SPRINTF("TOPROOT_G%dP%d",GroupNumber,PartitionNumber)
        #ifdef %<TopRootName>
        #undef %<TopRootName>
        #endif
        #define %<TopRootName> &%<PointerArrayName>, %<PointerArrayName>Size, %<TopCount>
    %closefile buffer
    %<LibSetSourceFileSection(partitionFileH,"Definitions",buffer)>

    %% Step 2/3: Create the pointer array and size array
    %openfile buffer
        void* %<PointerArrayName>[] = /* '%<LibGetBlockName(block)>' */
        {
            %foreach j = TopCount
                &%<TopStruct[j]>.%<TopSignal[j]>,
            %endforeach
        };
        uint32_t %<PointerArrayName>Size[] = /* '%<LibGetBlockName(block)>' */
        {
            %foreach j = TopCount
                sizeof(%<TopStruct[j]>.%<TopSignal[j]>),
            %endforeach
        };

    %closefile buffer
    %<LibSetSourceFileCustomSection(fileH,"PointerArrays",buffer)>

    %% Step 3/3: Record the TOP information so tokens can be created by the CSC
    %foreach j = TopCount
        %% Record map to get from struct name to its information
        %if TLC_FALSE == ISFIELD(::TOP_STRUCT_INFO,TopStruct[j])
            %addtorecord ::TOP_STRUCT_INFO \
                %<TopStruct[j]> {GroupPath GroupPath; PartitionNumber PartitionNumber; GroupNumber GroupNumber}
        %endif

        %% Record map from TopPath to index within partition
        %assign added = SETFIELD(::TOP_PATH_INDEX, TopPath[j], j)
    %endforeach

%endfunction
