//  Memory map file to generate linker scripts for programs without board I/O.

// Customer ID=18233; Build=0x9dfea; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//
BEGIN dram1
0x80000: dataRam : dram1 : 0x20000 : writable ;
 dram1_0 : C : 0x80000 - 0x9ffff : .dram1.rodata .dram1.data .dram1.bss;
END dram1

BEGIN dram0
0xa0000: dataRam : dram0 : 0x20000 : writable ;
 dram0_0 : C : 0xa0000 - 0xbffff : .dram0.rodata .iram1.literal .dram0.data .dram0.bss;
END dram0

BEGIN iram1
0xc0000: instRam : iram1 : 0x20000 : executable, writable ;
 iram1_0 : C : 0xc0000 - 0xdffff : .iram1.text;
END iram1

BEGIN iram0
0xe0000: instRam : iram0 : 0x20000 : executable, writable ;
 iram0_0 : C : 0xe0000 - 0xf0dff : .iram0.literal .iram0.text;
 iram0_1 : F : 0xf0e00 - 0xf0f77 : .WindowVectors.text;
 iram0_2 : C : 0xf0f78 - 0xf1007 : .Level2InterruptVector.literal;
 iram0_3 : F : 0xf1008 - 0xf103f : .Level2InterruptVector.text;
 iram0_4 : C : 0xf1040 - 0xf1047 : .DebugExceptionVector.literal;
 iram0_5 : F : 0xf1048 - 0xf107f : .DebugExceptionVector.text;
 iram0_6 : C : 0xf1080 - 0xf1087 : .KernelExceptionVector.literal;
 iram0_7 : F : 0xf1088 - 0xf10bf : .KernelExceptionVector.text;
 iram0_8 : C : 0xf10c0 - 0xf10c7 : .UserExceptionVector.literal;
 iram0_9 : F : 0xf10c8 - 0xf10ff : .UserExceptionVector.text;
 iram0_10 : C : 0xf1100 - 0xf1147 : .DoubleExceptionVector.literal;
 iram0_11 : F : 0xf1148 - 0xf1187 : .DoubleExceptionVector.text;
 iram0_12 : C : 0xf1188 - 0xf118f : .ResetVector.literal;
 iram0_13 : F : 0xf1190 - 0xf148f : .ResetVector.text .ResetHandler.literal .ResetHandler.text;
 iram0_14 : C : 0xf1490 - 0xfffff : ;
END iram0

BEGIN sram
0x20100000: sysram : sram : 0x800000 : executable, writable ;
 sram0 : C : 0x20100000 - 0x208fffff :  STACK :  HEAP : .sram.rodata .clib.rodata .rtos.rodata .rodata .sram.literal .literal .rtos.literal .clib.literal .sram.text .text .clib.text .rtos.text .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .sram.data .data __llvm_prf_names .oj_ext_data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .sram.bss .bss;
END sram

