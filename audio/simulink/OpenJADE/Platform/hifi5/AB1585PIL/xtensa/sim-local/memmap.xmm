//  Memory map file to generate linker scripts for programs run on the ISS.

// Customer ID=7578; Build=0x9ee81; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



// Additions for -mlocalmems option:
PLACE SECTIONS(.bss) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.data) WITH_SECTION(.dram0.data)
PLACE SECTIONS(.rodata) WITH_SECTION(.dram0.rodata)
PLACE SECTIONS(STACK) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(HEAP) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.literal) WITH_SECTION(.iram0.literal)
PLACE SECTIONS(.text) WITH_SECTION(.iram0.text)

// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//
BEGIN sram
0x4200000: sysram : sram : 0x100000 : executable, writable ;
 sram0 : C : 0x4200000 - 0x42fffff : .sram.rodata .sram.literal .sram.text .sram.data __llvm_prf_names .sram.bss;
END sram

BEGIN dram0
0x4580000: dataRam : dram0 : 0x100000 : writable ;
 dram0_0 : C : 0x4580000 - 0x467ffff :  STACK :  HEAP : .oj_ext_data .dram0.rodata .clib.rodata .rtos.rodata .rodata .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .dram0.data .data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .dram0.bss .bss;
END dram0

BEGIN iram0
0x4700000: instRam : iram0 : 0x20000 : executable, writable ;
 iram0_0 : C : 0x4700000 - 0x47003ff : ;
 iram0_1 : F : 0x4700400 - 0x4700577 : .WindowVectors.text;
 iram0_2 : C : 0x4700578 - 0x470057b : .Level2InterruptVector.literal;
 iram0_3 : F : 0x470057c - 0x4700597 : .Level2InterruptVector.text;
 iram0_4 : C : 0x4700598 - 0x470059b : .Level3InterruptVector.literal;
 iram0_5 : F : 0x470059c - 0x47005b7 : .Level3InterruptVector.text;
 iram0_6 : C : 0x47005b8 - 0x47005bb : .Level4InterruptVector.literal;
 iram0_7 : F : 0x47005bc - 0x47005d7 : .Level4InterruptVector.text;
 iram0_8 : C : 0x47005d8 - 0x47005db : .DebugExceptionVector.literal;
 iram0_9 : F : 0x47005dc - 0x47005f7 : .DebugExceptionVector.text;
 iram0_10 : C : 0x47005f8 - 0x47005fb : .NMIExceptionVector.literal;
 iram0_11 : F : 0x47005fc - 0x4700617 : .NMIExceptionVector.text;
 iram0_12 : C : 0x4700618 - 0x470061b : .KernelExceptionVector.literal;
 iram0_13 : F : 0x470061c - 0x4700637 : .KernelExceptionVector.text;
 iram0_14 : C : 0x4700638 - 0x470063b : .UserExceptionVector.literal;
 iram0_15 : F : 0x470063c - 0x4700657 : .UserExceptionVector.text;
 iram0_16 : C : 0x4700658 - 0x470065b : .DoubleExceptionVector.literal;
 iram0_17 : F : 0x470065c - 0x4700677 : .DoubleExceptionVector.text;
 iram0_18 : C : 0x4700678 - 0x470067f : .ResetVector.literal;
 iram0_19 : F : 0x4700680 - 0x470095f : .ResetVector.text .ResetHandler.literal .ResetHandler.text;
 iram0_20 : C : 0x4700960 - 0x471ffff : .iram0.literal .literal .rtos.literal .clib.literal .iram0.text .text .clib.text .rtos.text;
END iram0

BEGIN iram1
0x4720000: instRam : iram1 : 0x20000 : executable, writable ;
 iram1_0 : C : 0x4720000 - 0x473ffff : .iram1.literal .iram1.text;
END iram1

