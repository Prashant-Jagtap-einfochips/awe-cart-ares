// Profiling Mask Pointer
extern bool* pProfileMask;
// Profiling Context Pointer
extern Profile_Context* pProfileContext;
// Profiling MIPS parameter table Pointer
extern const float* pProfileMipsPara;
// Profiling Counter table Pointer
extern const unsigned int* pProfileCounterPara;


// Profiling Configuration
extern unsigned int profile_cycleOrmips;
// Profiling threshold (0 - 1)
extern float profile_threshold;






void OJ_profileInit(void);
void OJ_profileEnable(unsigned int profile_target);
void OJ_profileDisable(unsigned int profile_target);
void OJ_profileReset(unsigned int profile_target);
void OJ_profileThreshold(float percentage);
void OJ_profileCycleOrMips(unsigned int cycle_or_mips);
#ifdef SAVE_PROFILING_TO_LOCAL
void OJ_profileSaveToFile(void);
#endif


#ifdef PROFILE_STARTSTOP_INLINE
static inline void OJ_profileStart(unsigned int profile_target)
{
    if (pProfileMask[profile_target] == true) {
        pProfileContext[profile_target].start_counter = READ_CLOCKCYCLE;
    }
}

static inline void OJ_profileStop(unsigned int profile_target)
{
    unsigned int tmp;
    Profile_Context* puser = &pProfileContext[profile_target];
    unsigned int final_counter = READ_CLOCKCYCLE - puser->start_counter;
    

    puser->start_counter = 0;
    tmp = puser->cur_cycles + final_counter;
    if ((tmp < 100000000) && (puser->prof_counter < 0xFFFFFF00)) {
        puser->avg_value = (float)(tmp + puser->prof_counter * puser->avg_value) / (puser->prof_counter + 1);    
        puser->peak_value = (puser->peak_value > (float)tmp) ? (puser->peak_value) : (float)(tmp);
        puser->prof_counter += 1;
        if (puser->prof_counter > pProfileCounterPara[profile_target]) {
            // Do statistical collection
            if (tmp - puser->avg_value >= puser->avg_value * PROFILE_THRESHOLD) {
                puser->over_counter += 1;

            }
        }
    }
    puser->cur_cycles = 0; 
}
#else
void OJ_profileStart(unsigned int profile_target);
void OJ_profileStop(unsigned int profile_target);
#endif


//void ContextSwitchHook(void* current_task_ptr, void* ready_task_ptr);
void ContextSwitchHook(signed int current_prio, signed int ready_prio);


#endif

