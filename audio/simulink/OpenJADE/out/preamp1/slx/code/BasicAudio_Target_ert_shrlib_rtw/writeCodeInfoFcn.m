% Autogenerated file: Wed Jul 17 15:46:53 2024
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;

prmIdxMap = containers.Map;




wr = coder.internal.writeDataInterfacesToCodeDescriptor("BasicAudio_Target",pwd) ;
wr.writeName(codeInfo.Name);




            % Setting Inport#1's implementation
            codeInfo.Inports(1).Implementation = RTW.DataImplementation.empty;
            wr.writeRootInport(RTW.DataImplementation.empty, codeInfo.Inports(1));







            % Setting Outport#1's Implementation
            codeInfo.Outports(1).Implementation = RTW.DataImplementation.empty;
            wr.writeRootOutport(RTW.DataImplementation.empty, codeInfo.Outports(1));

skippedParameters = [];




            % Setting DataStore#1's  implementation
            codeInfo.DataStores(1).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(1));


            % Setting DataStore#2's  implementation
            codeInfo.DataStores(2).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(2));


            % Setting DataStore#3's  implementation
            codeInfo.DataStores(3).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(3));


            % Setting DataStore#4's  implementation
            codeInfo.DataStores(4).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(4));


            % Setting DataStore#5's  implementation
            codeInfo.DataStores(5).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(5));


            % Setting DataStore#6's  implementation
            codeInfo.DataStores(6).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(6));


            % Setting DataStore#7's  implementation
            codeInfo.DataStores(7).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(7));


            % Setting DataStore#8's  implementation
            codeInfo.DataStores(8).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(8));


            % Setting DataStore#9's  implementation
            codeInfo.DataStores(9).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(9));


            % Setting DataStore#10's  implementation
            codeInfo.DataStores(10).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(10));


            % Setting DataStore#11's  implementation
            codeInfo.DataStores(11).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(11));


            % Setting DataStore#12's  implementation
            codeInfo.DataStores(12).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(12));


            % Setting DataStore#13's  implementation
            codeInfo.DataStores(13).Implementation = RTW.DataImplementation.empty;
            wr.writeDataStore(RTW.DataImplementation.empty, codeInfo.DataStores(13));


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 0);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 1);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 2);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 3);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 4);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 5);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 6);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 7);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 8);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 9);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 10);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 11);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 12);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 13);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 14);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 15);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 16);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 17);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 18);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 19);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 20);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 21);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 22);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 23);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 24);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 25);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 26);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 27);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 28);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 29);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 30);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 31);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 32);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 33);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 34);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 35);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 36);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 37);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 38);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 39);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 40);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 41);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 42);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 43);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 44);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 45);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 46);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 47);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 48);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 49);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 50);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 51);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 52);


                
                wr.writeExternalBlockOutput(RTW.DataImplementation.empty, 53);


            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            






































































            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


    func_Initialize_Prototype = coder.types.Prototype;
    func_Initialize_Prototype.Arguments  = tmpArgs;
    func_Initialize_Prototype.Return     = tmpRet;

        func_Initialize_Prototype.HeaderFile = 'BasicAudio_Target.h';
    func_Initialize_Prototype.SourceFile = 'BasicAudio_Target.c';

    func_Initialize_Interface = RTW.FunctionInterface;
    func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
    func_Initialize_Interface.ActualArgs   = tmpActualArgs;
    func_Initialize_Interface.ActualReturn = tmpActualReturn;

        func_Initialize_Prototype.Name = 'BasicAudio_Target_initialize';
    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Initialize_Interface.Timing = time_constant;
        codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, func_Initialize_Interface'];
        func_Initialize_Interface.IsInitializeFunction = true;

                            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


            





    func_OutputUpdate_Prototype = coder.types.Prototype;
    func_OutputUpdate_Prototype.Arguments  = tmpArgs;
    func_OutputUpdate_Prototype.Return     = tmpRet;

        func_OutputUpdate_Prototype.HeaderFile = 'BasicAudio_Target.h';
    func_OutputUpdate_Prototype.SourceFile = 'BasicAudio_Target.c';

    func_OutputUpdate_Interface = RTW.FunctionInterface;
    func_OutputUpdate_Interface.Prototype    = func_OutputUpdate_Prototype;
    func_OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
    func_OutputUpdate_Interface.ActualReturn = tmpActualReturn;

            func_OutputUpdate_Prototype.Name = 'BasicAudio_Target_step';
    time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        func_OutputUpdate_Interface.Timing = time_0;
        codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate_Interface'];

                    
                


                tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


    func_Terminate_Prototype = coder.types.Prototype;
    func_Terminate_Prototype.Arguments  = tmpArgs;
    func_Terminate_Prototype.Return     = tmpRet;

        func_Terminate_Prototype.HeaderFile = 'BasicAudio_Target.h';
    func_Terminate_Prototype.SourceFile = 'BasicAudio_Target.c';

    func_Terminate_Interface = RTW.FunctionInterface;
    func_Terminate_Interface.Prototype    = func_Terminate_Prototype;
    func_Terminate_Interface.ActualArgs   = tmpActualArgs;
    func_Terminate_Interface.ActualReturn = tmpActualReturn;

    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Terminate_Interface.Timing = time_constant;
                func_Terminate_Prototype.Name = ['BasicAudio_Target_terminate'];
        codeInfo.TerminateFunctions =  [codeInfo.TerminateFunctions, func_Terminate_Interface'];


    




            % Opaque Data Type
            type_RTModel  = coder.types.Opaque;
            type_RTModel.Identifier = 'RT_MODEL_BasicAudio_Target_T';
            

        % Pointer Type: Pointer to type_RTModel
        Ptrtype_RTModel_1_0 = coder.types.Pointer;
            Ptrtype_RTModel_1_0.BaseType = type_RTModel;
        Ptrtype_RTModel_1_0.ReadOnly = 1;
        Ptrtype_RTModel_1_0.Volatile = 0;
        




        % Variable: Var_RTModel
        Var_RTModel = RTW.Variable(Ptrtype_RTModel_1_0.BaseType, 'BasicAudio_Target_M_');
        Var_RTModel.Owner           = 'BasicAudio_Target';
        Var_RTModel.DeclarationFile = 'BasicAudio_Target.h';
            Var_RTModel.DefinitionFile  = 'BasicAudio_Target.c';
        

        % Pointer Variable: PtrVar_RTModel
        PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'BasicAudio_Target_M', Var_RTModel);
        
        PtrVar_RTModel.Owner = Var_RTModel.Owner;
            PtrVar_RTModel.DeclarationFile = Var_RTModel.DeclarationFile;
            PtrVar_RTModel.DefinitionFile = Var_RTModel.DefinitionFile;

        % Data Interface: idata_RTModel
            empty_timing = RTW.TimingInterface.empty;
        idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);
        









    
























































































        
            wr.removeEmptyFunctionFromSubsystemInterface('2333:295:298', 'BasicAudio_Target_SetDsm_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2333:295:298', 'BasicAudio_Target_SetDsm', 1);






            




        

        wr.writeSubsystemFileInformation('2333:295:298', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');







        
            wr.removeEmptyFunctionFromSubsystemInterface('2333:295:299', 'BasicAudio_Target_SetDsm1_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2333:295:299', 'BasicAudio_Target_SetDsm1', 1);






            




        

        wr.writeSubsystemFileInformation('2333:295:299', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');
















































        
            wr.removeEmptyFunctionFromSubsystemInterface('2337:236:241', 'BasicAudio_Target_SetDsm_m_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2337:236:241', 'BasicAudio_Target_SetDsm_a', 1);






            




        

        wr.writeSubsystemFileInformation('2337:236:241', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');







        
            wr.removeEmptyFunctionFromSubsystemInterface('2337:236:242', 'BasicAudio_Target_SetDsm1_e_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2337:236:242', 'BasicAudio_Target_SetDsm1_m', 1);






            




        

        wr.writeSubsystemFileInformation('2337:236:242', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');
















































        
            wr.removeEmptyFunctionFromSubsystemInterface('2345:236:241', 'BasicAudio_Target_SetDsm_i_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2345:236:241', 'BasicAudio_Target_SetDsm_l', 1);






            




        

        wr.writeSubsystemFileInformation('2345:236:241', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');







        
            wr.removeEmptyFunctionFromSubsystemInterface('2345:236:242', 'BasicAudio_Target_SetDsm1_p_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2345:236:242', 'BasicAudio_Target_SetDsm1_f', 1);






            




        

        wr.writeSubsystemFileInformation('2345:236:242', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');






































































































        
            wr.removeEmptyFunctionFromSubsystemInterface('2333:295:298:8', 'BasicAudio_Target_LockEnter_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2333:295:298:8', 'BasicAudio_Target_LockEnter', 1);






            




        

        wr.writeSubsystemFileInformation('2333:295:298:8', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');







        
            wr.removeEmptyFunctionFromSubsystemInterface('2333:295:298:18', 'BasicAudio_Target_LockExit_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2333:295:298:18', 'BasicAudio_Target_LockExit', 1);






            




        

        wr.writeSubsystemFileInformation('2333:295:298:18', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');





































































































































































































































































































        
            wr.removeEmptyFunctionFromSubsystemInterface('2349:263:271:129', 'BasicAudio_Target_SetDsm_e_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2349:263:271:129', 'BasicAudio_Target_SetDsm_f', 1);






            




        

        wr.writeSubsystemFileInformation('2349:263:271:129', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');







        
            wr.removeEmptyFunctionFromSubsystemInterface('2349:263:271:134', 'BasicAudio_Target_SetDsm1_n_Disable');

        
                        wr.removeUnusedArgumentFromSubsystemInterface('2349:263:271:134', 'BasicAudio_Target_SetDsm1_g', 1);






            




        

        wr.writeSubsystemFileInformation('2349:263:271:134', 'BasicAudio_Target_private.h', 'BasicAudio_Target.c');
















































































if ~isempty(skippedParameters)
wr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end

        codeInfo.InternalData = [codeInfo.InternalData, idata_RTModel];
    wr.addInternalData(idata_RTModel);

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr);
end

wr.writeFunctionInterfaces(codeInfo);
wr.writeServerCallPoints(codeInfo);



wr.closeRepo();
    if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
    else
    save codeInfo.mat codeInfo;
    end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
data = RTW.DataInterface.empty;
for idx=1:numel(list)
if ~isPresentDI(data, list(idx))
data(end+1) = list(idx); %#ok<AGROW>
end
end
% End Function: uniquifyDataAccess

function isPresent = isPresentDI(list, di)
isPresent = false;
for idx = 1:numel(list)
if isequal(list(idx), di)
isPresent = true;
break
end
end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
idx = find(internalIdVec == internalId);
if (isempty(idx) || (length(idx) > 1))
ciMsg = 'Time object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
if (strcmp(ciName, rtwName) ~= 1)
ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName];
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataName, iDataVec(idxData).GraphicalName)
iData(end+1) = iDataVec(idxData);
break
end
end
if (isempty(iData) || (length(iData) > 1))
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
iData = iDataVec(idxData);
break
end
end
if isempty(iData)
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr)
    % Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

    % Parameters
    for i = 1:length(codeInfo.Parameters)
    sid = codeInfo.Parameters(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    wr.updateSIDForSubsystemBuild("Parameter", i, sid, codeInfo.Parameters(i));
    codeInfo.Parameters(i).SID = sid;
    end

    % Data Stores
    for i = 1:length(codeInfo.DataStores)
    sid = codeInfo.DataStores(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.DataStores(i).SID = sid;
    wr.updateSIDForSubsystemBuild("DataStore", i, sid);

    end

    % Inports
    for i = 1:length(codeInfo.Inports)
    sid = codeInfo.Inports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Inports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Inport", i, sid);

    end

    % Outports
    for i = 1:length(codeInfo.Outports)
    sid = codeInfo.Outports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Outports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Outport", i, sid);

    end

