%implements s105_b0_435hk_21_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

int32_T i;
boolean_T exitg1;
%closefile localVarDecl
/* {S!d85}MATLAB Function: '<S11>/check sequence' */
/* {S!d90}MATLAB Function: '<S11>/check sequence' */
/*  Invoke the function trigger output */
/* MATLAB Function 'RTC/NtfCheck': '<S28>:1' */
/* '<S28>:1:3' go(); */
/*  Function which checks if the notification sequence */
/*  has completed successfully  */
/* MATLAB Function 'BasicAudio/Balance/balance/InnerLink/check sequence': '<S25>:1' */
/*  Assume the work is complete until proven otherwise */
/* '<S25>:1:8' done = true; */
/*@>167c38*/BasicAudio_Target_B./*@>167e30*/done_p/*@>12f690*/ = /*@>1675da*/true;
/* '<S25>:1:10' for i=1:MaskNumRampers */
/*@>1675db*/i/*@>12f6a2*/ = /*@>167dde*/0;
exitg1 = false;
while/*@<12f6ab*/ ((!exitg1) && (/*@>1675de*/i/*@>12f6aa*/ <= /*@>1675e0*/3)) {
    /* '<S25>:1:11' if (Rampers(i).targetGain ~= Rampers(i).currentGain) */
    /*@>12f69b*/if (%<SLibCG_DumpSSCode("/*@[167d91*/",(SLibCG_SE(SLibCG_CSCDW(3, 1, "[/*@>167d68*/i].targetGain", -1, "", 0))),"/*@]*/")>/*@>12f698*/ != %<SLibCG_DumpSSCode("/*@[167d5b*/",(SLibCG_SE(SLibCG_CSCDW(3, 1, "[/*@>167d32*/i].currentGain", -1, "", 0))),"/*@]*/")>) {
        /* '<S25>:1:12' done = false; */
        /*@>167c44*/BasicAudio_Target_B./*@>167e36*/done_p/*@>12f697*/ = /*@>1675e8*/false;
        /*  just proved otherwise */
        exitg1 = true;
    } else {
        /*@>1675e6*/i/*@>167e03*/++;
    }
}
/* {S!d87}Outputs for Function Call SubSystem: '<S11>/Triggered Subsystem' */
/* {S!d92}SignalConversion generated from: '<S15>/In1' */
/*@>167c3e*/BasicAudio_Target_B./*@>167e33*/In1_d/*@>12f67e*/ = %<SLibCG_DumpSSCode("/*@[167dad*/",(SLibCG_SE(SLibCG_BOCSC(22, 1, "", -1, "", 0))),"/*@]*/")>;
/* {E!d87}End of Outputs for SubSystem: '<S11>/Triggered Subsystem' */
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(21, 0, fcnProtoType)>
%endfunction
